using System;
using GiftServer.Data;
using GiftServer.Exceptions;
using GiftServer.HtmlManager;
using GiftServer.Properties;
using GiftServer.Security;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Threading;
using System.Web;

namespace GiftServer
{
    namespace Server
    {
        /// <summary>
        /// The Controller routes calls and is the "brain" of the Web Server.
        /// </summary>
        /// <remarks>
        /// The Controller is the central point of execution for all incoming requests. Note that this does *not*
        /// mean that it is a "God" class - indeed, most of the work is actually done via the set of Managers in the HtmlManager namespace
        /// However, this class's primary role is to run the Dispatch method and to keep a log of connections
        /// </remarks>
        public class Controller
        {
            /// <summary>
            /// A list of connections; this list is never emptied and provides details about each connection
            /// </summary>
            public static readonly List<Connection> Connections = new List<Connection>();
            /// <summary>
            /// Warnings generated by the server. Warnings include everything from Execution Errors to a lack of authorization.
            /// </summary>
            public static readonly List<Warning> Warnings = new List<Warning>();
            /// <summary>
            /// The culture specified for this instance, usually defined from the user.
            /// </summary>
            public CultureInfo Culture
            {
                get
                {
                    return culture;
                }
            }
            /// <summary>
            /// The user that represents THIS connection
            /// </summary>
            /// <remarks>
            /// If this is null, then there is no logged in user
            /// </remarks>
            public User User
            {
                get
                {
                    return _user;
                }
            }
            private readonly static Object key = new Object();
            private CultureInfo culture;
            private User _user;
            private HttpListenerContext _ctx;
            private HttpListenerRequest _request;
            private HttpListenerResponse _response;
            private NameValueCollection _dict;
            /// <summary>
            /// The Login HTML Manager for this controller instance
            /// </summary>
            public readonly LoginManager LoginManager;
            /// <summary>
            /// The Navigation Bar Manager for this controller instance
            /// </summary>
            public readonly NavigationManager NavigationManager;
            /// <summary>
            /// The Dashboard Manager for this controller instance
            /// </summary>
            public readonly DashboardManager DashboardManager;
            /// <summary>
            /// The Profile Manager for this controller instance
            /// </summary>
            public readonly ProfileManager ProfileManager;
            /// <summary>
            /// The List Manager for this controller instance
            /// </summary>
            public readonly ListManager ListManager;
            /// <summary>
            /// The Reset Manager for this controller instance
            /// </summary>
            public readonly ResetManager ResetManager;

            /// <summary>
            /// Instantiate a new controller
            /// </summary>
            /// <param name="ctx">The HttpListenerContext for this connection</param>
            /// <remarks>
            /// This instantiates all of the HtmlManagers, which use this for culture information.
            /// </remarks>
            public Controller(HttpListenerContext ctx)
            {
                _ctx = ctx;
                _request = ctx.Request;
                _response = ctx.Response;
                GetUser();
                LoginManager = new LoginManager(this);
                NavigationManager = new NavigationManager(this);
                DashboardManager = new DashboardManager(this);
                ProfileManager = new ProfileManager(this);
                ListManager = new ListManager(this);
                ResetManager = new ResetManager(this);
            }
            /// <summary>
            /// Dispatch will, given a request, return the webpage that will be shown to the user.
            /// </summary>
            /// <remarks>Dispatch is used to communicate with the server</remarks>
            /// <returns>The html to be sent back to the user. Additionally, it will also alter the response, if necessary</returns>
            public string Dispatch()
            {
                try
                {
                    /*
                    if (!_request.Url.OriginalString.Contains("https://"))
                    {
                        _response.Redirect(Constants.URL);
                        return null;
                    }
                    */
                    string path = ParsePath();
                    if (_request.HasEntityBody)
                    {
                        string input;
                        // Read input, then dispatch accordingly
                        using (StreamReader reader = new StreamReader(_request.InputStream))
                        {
                            input = reader.ReadToEnd();
                            _dict = HttpUtility.ParseQueryString(input);
                            if (_dict["action"] != null)
                            {
                                // Dispatch to correct logic:
                                switch (_dict["action"])
                                {
                                    case "Culture":
                                        GetCulture(_dict["culture"]);
                                        return LoginManager.Login();
                                    case "Image":
                                        switch (_dict["type"])
                                        {
                                            case "user":
                                                _user.SaveImage(Convert.FromBase64String(_dict["image"]));
                                                return "200";
                                            case "gift":
                                                (new Gift(Convert.ToUInt64(_dict["itemId"]))).SaveImage(Convert.FromBase64String(_dict["image"]));
                                                return "200";
                                            default:
                                                return "404";
                                        }
                                    case "Logout":
                                        Logout();
                                        return LoginManager.Login();
                                    case "Login":
                                        switch (_dict["type"])
                                        {
                                            case "Google":
                                                try
                                                {
                                                    if (String.IsNullOrEmpty(_dict["password"]))
                                                    {
                                                            try
                                                            {
                                                                _user = new User(new GoogleUser(_dict["token"]), new Action<MailAddress>((MailAddress email) => PasswordReset.SendRecoveryEmail(email, ResetManager)));
                                                            }
                                                            catch (NewOAuthForUserException)
                                                            {
                                                                // Send failure, request password
                                                                return "confirm";
                                                            }
                                                            string hash = AddConnection(_user.ID, _request.RemoteEndPoint);
                                                            Cookie logger = new Cookie("UserHash", hash);
                                                            _response.Cookies.Add(logger);
                                                            _response.AppendHeader("dest", "dashboard");
                                                            return "success";
                                                    }
                                                    else
                                                    {
                                                        // We have password, now we are sure
                                                        try
                                                        {
                                                            _user = new User(new GoogleUser(_dict["token"]), _dict["password"]);
                                                            return ParseQuery();
                                                        }
                                                        catch (InvalidPasswordException p)
                                                        {
                                                            return LoginManager.FailLogin(p);
                                                        }

                                                    }
                                                }
                                                catch (Exception e)
                                                {
                                                    Warnings.Add(new ExecutionErrorWarning(e));
                                                    return LoginManager.FailOAuth;
                                                }
                                            case "Facebook":
                                                try
                                                {
                                                    _user = new User(new FacebookUser(_dict["token"]), new Action<MailAddress>((MailAddress email) => PasswordReset.SendRecoveryEmail(email, ResetManager)));
                                                    string hash = AddConnection(_user.ID, _request.RemoteEndPoint);
                                                    Cookie logger = new Cookie("UserHash", hash);
                                                    _response.Cookies.Add(logger);
                                                    _response.AppendHeader("dest", "dashboard");
                                                    return "success";
                                                }
                                                catch (Exception e)
                                                {
                                                    Warnings.Add(new ExecutionErrorWarning(e));
                                                    return LoginManager.FailOAuth;
                                                }
                                            case "Email":
                                            default:
                                                try
                                                {
                                                    _user = new User(new MailAddress(_dict["email"]), _dict["password"]);
                                                    // Get hash
                                                    string hash = AddConnection(_user.ID, _request.RemoteEndPoint);
                                                    Cookie logger = new Cookie("UserHash", hash);
                                                    _response.Cookies.Add(logger);
                                                    _response.AppendHeader("dest", "dashboard");
                                                    // If already logged in, just add remote end point:
                                                    return ParseQuery();
                                                }
                                                catch (Exception e)
                                                {
                                                    Warnings.Add(new ExecutionErrorWarning(e));
                                                    return LoginManager.FailLogin(e);
                                                }
                                        }
                                    case "PasswordResetRequest":
                                        // POST data will have user email. Send recovery email.
                                        try
                                        {
                                            PasswordReset.SendRecoveryEmail(new MailAddress(_dict["email"]), ResetManager);
                                            return ResetManager.ResetPasswordSent();
                                        }
                                        catch (SmtpException)
                                        {
                                            // DB Cleanup already taken care of
                                            return ResetManager.ResetPasswordFailure();
                                        }
                                    case "PasswordReset":
                                        // Reset password and direct to login page
                                        // POST data will have userID in userID input. Reset the password and let the user know.
                                        _user = new User(Convert.ToUInt64(_dict["userID"]));
                                        string password = _dict["password"];
                                        _user.UpdatePassword(password, new Action<MailAddress, User>((Email, User) =>
                                        {
                                            try
                                            {
                                                MailMessage email = new MailMessage(new MailAddress(Constants.OrgName + "<" + Constants.SupportEmail + ">"), Email)
                                                {
                                                    Body = ResetManager.GenerateNotification(User),
                                                    Subject = ResetManager.ResetNotificationSubject,
                                                    IsBodyHtml = true
                                                };
                                                using (SmtpClient sender = new SmtpClient(Constants.SmtpClient, Convert.ToInt32(Constants.SmtpPort)))
                                                {
                                                    sender.EnableSsl = true;
                                                    sender.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                    sender.UseDefaultCredentials = false;
                                                    sender.Credentials = new NetworkCredential(Constants.SupportEmail, Constants.EmailPassword);
                                                    sender.Send(email);
                                                }
                                            }
                                            catch (SmtpException)
                                            {
                                                // Silenced - nothing we can do here and, frankly, nothing to tell the user...
                                            }
                                        }));
                                        return ResetManager.ResetPasswordSuccess();
                                    case "Create":
                                        switch (_dict["type"])
                                        {
                                            case "User":
                                                try
                                                {
                                                    _user = new User(new MailAddress(_dict["email"]), new Password(_dict["password"]))
                                                    {
                                                        Name = _dict["userName"]
                                                    };
                                                    _user.Create();
                                                    return LoginManager.SuccessSignup();
                                                }
                                                catch (Exception e)
                                                {
                                                    return LoginManager.FailLogin(e);
                                                }
                                            case "Group":
                                                try
                                                {
                                                    Group group = new Group(_user, _dict["name"]);
                                                    group.Create();
                                                    return group.ID.ToString();
                                                }
                                                catch (Exception e)
                                                {
                                                    Warnings.Add(new ExecutionErrorWarning(e));
                                                    return "0";
                                                }
                                            case "Event":
                                                try
                                                {
                                                    Event e = null;
                                                    RulesEngine rules = null;
                                                    // If not recurring, then RulesEngine is null:
                                                    if (!String.IsNullOrEmpty(_dict["recurType"]))
                                                    {
                                                        // Figure out type of recur:
                                                        if (_dict["recurType"] == "exact")
                                                        {
                                                            rules = new ExactEvent(_dict["interval"], Convert.ToInt32(_dict["skipEvery"]));
                                                        }
                                                        else
                                                        {
                                                            rules = new RelativeEvent(_dict["interval"], Convert.ToInt32(_dict["skipEvery"]), _dict["dayOfWeek"], Convert.ToInt32(_dict["posn"]));
                                                        }
                                                    }
                                                    e = new Event(_dict["name"], DateTime.Parse(_dict["startDate"]), _user, rules);
                                                    if (!String.IsNullOrWhiteSpace(_dict["endDate"]))
                                                    {
                                                        e.EndDate = DateTime.Parse(_dict["endDate"]);
                                                    }
                                                    else
                                                    {
                                                        e.EndDate = null;
                                                    }
                                                    e.Create();
                                                    // For each group, add it to event
                                                    if (!String.IsNullOrWhiteSpace(_dict["groups[]"]))
                                                    {
                                                        foreach (string group in _dict["groups[]"].Split(','))
                                                        {
                                                            Group g = new Group(Convert.ToUInt64(group));
                                                            g.Add(e);
                                                        }
                                                    }
                                                    if (!String.IsNullOrWhiteSpace(_dict["blackouts[]"]))
                                                    {
                                                        foreach (string blackout in _dict["blackouts[]"].Split(','))
                                                        {
                                                            Blackout b = new Blackout(e, DateTime.Parse(blackout));
                                                            try
                                                            {
                                                                b.Create();
                                                            }
                                                            catch (InvalidOperationException)
                                                            {
                                                                // continue on to next one
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                    // For each blackout, add it to event
                                                    return e.ID.ToString();
                                                }
                                                catch (Exception e)
                                                {
                                                    Warnings.Add(new ExecutionErrorWarning(e));
                                                    return "0";
                                                }
                                            case "Gift":
                                                try
                                                {
                                                    Gift gift = new Gift(_dict["name"])
                                                    {
                                                        Description = _dict["description"],
                                                        Cost = Convert.ToDouble(_dict["cost"].Length == 0 ? "0" : _dict["cost"]),
                                                        Quantity = Convert.ToUInt32(_dict["quantity"].Length == 0 ? "1" : _dict["quantity"]),
                                                        Rating = Convert.ToDouble(_dict["rating"].Length == 0 ? "0" : _dict["rating"]),
                                                        Size = _dict["size"],
                                                        Url = _dict["url"],
                                                        Stores = _dict["stores"],
                                                        User = _user,
                                                        ColorText = _dict["colorText"],
                                                        Category = new Category(_dict["category"]),
                                                        Color = _dict["color"]
                                                    };
                                                    gift.Create();
                                                    return gift.ID.ToString();
                                                }
                                                catch (Exception e)
                                                {
                                                    Warnings.Add(new ExecutionErrorWarning(e));
                                                    return "0";
                                                }
                                            default:
                                                return "";
                                        }
                                    case "Change":
                                        ulong changeId = Convert.ToUInt64(_dict["itemId"]);
                                        switch (_dict["type"])
                                        {
                                            case "User":
                                                return Update();
                                            case "Preferences":
                                                return Update(_user.Preferences);
                                            case "Event":
                                                return Update(new Event(changeId));
                                            case "Group":
                                                return Update(new Group(changeId));
                                            case "Gift":
                                                return Update(new Gift(changeId));
                                            default:
                                                return "";
                                        }
                                    case "Fetch":
                                        ulong fetchId = Convert.ToUInt64(_dict["itemId"]);
                                        IFetchable item = null;
                                        switch (_dict["type"])
                                        {
                                            case "Gift":
                                                item = new Gift(fetchId);
                                                break;
                                            case "User":
                                                item = new User(fetchId);
                                                break;
                                            case "Email":
                                                item = new User(new MailAddress(_dict["email"]));
                                                break;
                                            case "Event":
                                                item = new Event(fetchId);
                                                break;
                                            case "Group":
                                                item = new Group(fetchId);
                                                break;
                                            default:
                                                _response.StatusCode = 404;
                                                return "Specified information not found";
                                        }
                                        // Convert to:
                                        // return item.Fetch(_user).OuterXml;
                                        return item.Fetch(_user).OuterXml;
                                    default:
                                        return LoginManager.Login();
                                }
                            }
                            else
                            {
                                return LoginManager.Login();
                            }
                        }
                    }
                    else if (path.Length != 0)
                    {
                        return ServeResource(path);
                    }
                    else if (_user == null)
                    {
                        // Send login page EXCEPT if requesting password reset:
                        if (_request.QueryString["ResetToken"] != null)
                        {
                            try
                            {
                                return ResetManager.CreateReset(PasswordReset.GetUser(_request.QueryString["ResetToken"]));
                            }
                            catch (PasswordResetTimeoutException)
                            {
                                return ResetManager.ResetPasswordExpired();
                            }

                        }
                        else
                        {
                            return LoginManager.Login();
                        }
                    }
                    else if (_request.QueryString["dest"] != null)
                    {
                        return ParseQuery();
                    }
                    else
                    {
                        // If logged in (but no request), just send back home page:
                        return DashboardManager.Dashboard(_user);
                    }
                // catch exceptions and return something meaningful...
                }
                catch (Exception e)
                {
                    _response.StatusCode = 404;
                    Warnings.Add(new ExecutionErrorWarning(e));
                    return "";
                }
            }

            private string ParseQuery()
            {
                string query = _request.QueryString["dest"];
                switch (query)
                {
                    case "dashboard":
                        return DashboardManager.Dashboard(_user);
                    case "profile":
                        return ProfileManager.ProfilePage(_user);
                    case "reservations":
                        return ListManager.GiftReservations(_user);
                    case "myList":
                        return ListManager.GiftList(_user);
                    case "user":
                        return ProfileManager.ProfilePage(_user, new User(_request.QueryString["user"]));
                    case "list":
                        return ListManager.GiftList(_user, new User(_request.QueryString["user"]));
                    default:
                        return DashboardManager.Dashboard(_user);
                }
            }

            private string ServeResource(string serverPath)
            {
                string message = null;
                string path = GeneratePath(serverPath);
                // Check existence:
                if (File.Exists(path))
                {
                    // File exists: Check if filename even needs authentication:
                    if (Path.GetFileName(Path.GetDirectoryName(path)).Equals("users"))
                    {
                        if (Path.GetFileNameWithoutExtension(path).Equals("default"))
                        {
                            // Serve up immediately
                            Write(path);
                            Warnings.Add(new PublicResourceWarning(path));
                        }
                        else if (_user != null)
                        {
                            if (Path.GetFileNameWithoutExtension(path).Equals("User" + _user.ID))
                            {
                                // This user - write path
                                Write(path);
                            }
                            else
                            {

                                if (_user.GetGroups(new User(Convert.ToUInt64(Path.GetFileNameWithoutExtension(path).Substring(4)))).Count == 0)
                                {
                                    _response.StatusCode = 403;
                                    message = "Forbidden - You are not in any common groups with this user.";
                                }
                                else
                                {
                                    Write(path);
                                }
                            }
                        }
                    }
                    else if (Path.GetFileName(Path.GetDirectoryName(path)).Equals("gifts"))
                    {
                        // If default image is desired, serve up immediately:
                        if (Path.GetFileNameWithoutExtension(path).Equals("default"))
                        {
                            Write(path);
                            Warnings.Add(new PublicResourceWarning(path));
                        }
                        else if (_user != null)
                        {
                            // If GiftID and UserID match, we will be able to read; otherwise, no
                            // Get GID:
                            ulong gid = Convert.ToUInt64(Path.GetFileNameWithoutExtension(path).Substring(4));
                            if (_user.Gifts.Exists(new Predicate<Gift>(g => g.ID == gid)))
                            {
                                // Found in our own gifts; write
                                Write(path);
                            }
                            else
                            {
                                Gift gift = new Gift(gid);
                                if (gift.Groups.FindAll(g => g.Users.Exists(u => u.ID == _user.ID)).Count == 0)
                                {
                                    _response.StatusCode = 403;
                                    message = "Forbidden - You are not in any common groups with this gift.";
                                }
                                else
                                {
                                    Write(path);
                                }
                            }
                        }
                    }
                    else
                    {
                        // Not accessing images or gifts, so OK to just send info:
                        Write(path);
                        Warnings.Add(new PublicResourceWarning(path));
                    }
                }
                else if (Path.GetExtension(path).Equals(".ico"))
                {
                    switch (Path.GetFileNameWithoutExtension(path))
                    {
                        case "favicon":
                            Write(Constants.Favicon);
                            break;
                        case "FR":
                            Write(Constants.FR);
                            break;
                        case "GB":
                            Write(Constants.GB);
                            break;
                        case "US":
                            Write(Constants.US);
                            break;
                    }
                }
                else if (Path.GetFileNameWithoutExtension(path).ToLower() == "privacypolicy")
                {
                    return LoginManager.PrivacyPolicy();
                }
                else if (Path.GetFileNameWithoutExtension(path).ToLower() == "termsofservice")
                {
                    return LoginManager.TermsOfService();
                }
                else
                {
                    _response.StatusCode = 404;
                    message = "File Not Found: Unknown resource " + serverPath + ".";
                }
                return message;
            }

            private void Write(string path)
            {
                switch (Path.GetExtension(path).Substring(1))
                {
                    case "bm":
                    case "bmp":
                        _response.ContentType = "image/bmp";
                        break;
                    case "css":
                        _response.ContentType = "text/css";
                        break;
                    case "gif":
                        _response.ContentType = "image/gif";
                        break;
                    case "jpe":
                    case "jpeg":
                    case "jpg":
                        _response.ContentType = "image/jpeg";
                        break;
                    case "js":
                        _response.ContentType = "text/javascript";
                        break;
                    case "png":
                        _response.ContentType = "image/png";
                        break;
                    default:
                        break;
                }
                Write(File.ReadAllBytes(path));
            }
            private void Write(System.Drawing.Icon icon)
            {
                icon.Save(_response.OutputStream);
            }
            private void Write(byte[] buffer)
            {
                _response.ContentLength64 = buffer.Length;
                using (Stream response = _response.OutputStream)
                {
                    response.Write(buffer, 0, buffer.Length);
                }
            }

            private void GetUser()
            {
                // Check if user is logged in (via cookies?)
                Cookie reqLogger = _request.Cookies["UserHash"];
                if (reqLogger != null)
                {
                    string hash = Convert.ToString(reqLogger.Value);
                    ulong id;
                    if ((id = GetLogged(hash)) != 0)
                    {
                        _user = new User(id);
                    }
                    else
                    {
                        _user = null;
                        Warnings.Add(new CookieNotInvalidWarning(hash));
                    }
                }
                else 
                {
                    _user = null;
                }
                GetCulture();
            }
            private void GetCulture(string culture)
            {
                _response.AppendCookie(new Cookie
                {
                    Expires = DateTime.Now.AddYears(1),
                    Name = "culture",
                    Value = culture
                });
                this.culture = new CultureInfo(culture);
                Thread.CurrentThread.CurrentUICulture = this.culture;
                Thread.CurrentThread.CurrentCulture = this.culture;
            }
            private void GetCulture()
            {
                // First, if logged in, use that.
                // Then, if in cookies, use that.
                // Then, if location is in request, use that.
                // ONLY then, use en-US as default.
                
                // If logged in:
                if (_user != null)
                {
                    // Get from settings. For now, we'll use en-US. Store this in cookie? 
                    // (it will be faster to get from cookie than to query db)
                    culture = new CultureInfo(_user.Preferences.Culture);
                }
                // If in cookies:
                else if (_request.Cookies["culture"] != null)
                {
                    culture = new CultureInfo(_request.Cookies["culture"].Value);
                }
                // If location in request:
                else if (_request.UserLanguages.Length != 0)
                {
                    bool isSupported = false;
                    int ind = 0;
                    String lang = "";
                    while (!isSupported)
                    {
                        lang = ParseCulture(_request.UserLanguages[ind], out isSupported);
                        ind++;
                        if (ind == _request.UserLanguages.Length)
                        {
                            break;
                        }
                    }
                    culture = new CultureInfo(lang);
                    Cookie cultureCookie = new Cookie
                    {
                        Name = "culture",
                        Value = lang
                    };
                    if (isSupported)
                    {
                        cultureCookie.Expires = DateTime.Now.AddYears(1);
                    }
                    _response.AppendCookie(cultureCookie);
                }
                // otherwise, en-US
                else
                {
                    // Only for this session
                    culture = new CultureInfo("en-US");
                    _response.AppendCookie(new Cookie
                    {
                        Name = "culture",
                        Value = "en-US"
                    });
                }
                Thread.CurrentThread.CurrentUICulture = culture;
                Thread.CurrentThread.CurrentCulture = culture;
            }
            /// <summary>
            /// Loops through all the cultures, and returns the culture language AND if it was supported
            /// </summary>
            /// <param name="lang">The language / Culture</param>
            /// <param name="isSupported">Whether or not the language was supported</param>
            /// <returns>The corrected culture and its supported status</returns>
            public static string ParseCulture(string lang, out bool isSupported)
            {
                isSupported = true;
                switch (lang.ToLower())
                {
                    case "fr-fr":
                        return "fr-FR";
                    case "en-us":
                        return "en-US";
                    case "en-gb":
                        return "en-GB";
                    default:
                        break;
                }
                if (lang.ToLower().Contains("fr"))
                {
                    return "fr-FR";
                }
                else if (lang.ToLower().Contains("en"))
                {
                    return "en-US";
                }
                else
                {
                    // Language not currently supported
                    Warnings.Add(new InvalidCultureWarning(lang));
                    isSupported = false;
                    return "en-US";
                }

            }
            /// <summary>
            /// Convenience method if no support is desired
            /// </summary>
            /// <param name="lang">The language to parse</param>
            /// <returns>The closest-matching culture</returns>
            public static string ParseCulture(string lang)
            {
                return ParseCulture(lang, out bool ignore);
            }

            private string ParsePath()
            {
                string path = _request.RawUrl;
                if (path.Contains("?") || path.Length < 2)
                {
                    // there will be no img
                    path = "";
                }
                return path;
            }
            private string Update()
            {
                switch (_dict["item"])
                {
                    case "name":
                        // Update this user's name, then respond back with success:
                        _user.Name = _dict["name"];
                        break;
                    case "email":
                        _user.Email = new MailAddress(_dict["email"]);
                        break;
                    case "birthday":
                        _user.BirthMonth = Convert.ToInt32(_dict["month"]);
                        _user.BirthDay = Convert.ToInt32(_dict["day"]);
                        break;
                    case "bio":
                        _user.Bio = _dict["bio"];
                        break;
                    case "googleLogin":
                        _user.GoogleId = null;
                        break;
                    case "facebookLogin":
                        _user.FacebookId = null;
                        break;
                    case "delete":
                        _user.Delete();
                        Logout();
                        // will return HERE so as to not update a null user
                        return LoginManager.Login();
                    default:
                        _response.StatusCode = 404;
                        return "404";
                }
                _user.Update();
                return "200";
            }
            private string Update(Preferences preferences)
            {
                preferences.Culture = _dict["culture"];
                // preferences.Theme = Convert.ToInt32(_dict["theme"]);
                preferences.Update();
                return "200";
            }
            private string Update(Event e)
            {
                switch (_dict["item"])
                {
                    case "name":
                        e.Name = _dict["name"].Trim() != "" ? _dict["name"] : throw new ArgumentException("invalid name");
                        break;
                    case "startDate":
                        e.StartDate = DateTime.Parse(_dict["startDate"]);
                        break;
                    case "endDate":
                        e.EndDate = DateTime.Parse(_dict["endDate"]);
                        break;
                    case "addGroup":
                        new Group(Convert.ToUInt64(_dict["groupId"])).Add(e);
                        return "200";
                    case "removeGroup":
                        new Group(Convert.ToUInt64(_dict["groupId"])).Remove(e);
                        return "200";
                    case "addBlackout":
                        new Blackout(e, DateTime.Parse(_dict["blackout"])).Create();
                        return "200";
                    case "removeBlackout":
                        new Blackout(e, DateTime.Parse(_dict["blackout"])).Delete();
                        return "200";
                    case "delete":
                        e.Delete();
                        return "200";
                    default:
                        _response.StatusCode = 404;
                        return "404";
                }
                e.Update();
                return "200";
            }
            private string Update(Group group)
            {
                switch (_dict["item"])
                {
                    case "addUser":
                        {
                            User added = new User(Convert.ToUInt64(_dict["userId"]));
                            group.Add(added);
                            break;
                        }
                    case "removeUser":
                        {
                            User removed = new User(Convert.ToUInt64(_dict["userID"]));
                            group.Remove(removed);
                            break;
                        }
                    case "removeMe":
                        {
                            group.Remove(_user);
                            break;
                        }
                    case "addGift":
                        {
                            Gift added = new Gift(Convert.ToUInt64(_dict["giftId"]));
                            group.Add(added);
                            break;
                        }
                    case "removeGift":
                        {
                            Gift removed = new Gift(Convert.ToUInt64(_dict["giftId"]));
                            group.Remove(removed);
                            break;
                        }
                    case "addEvent":
                        {
                            Event added = new Event(Convert.ToUInt64(_dict["eventID"]));
                            group.Add(added);
                            break;
                        }
                    case "removeEvent":
                        {
                            Event removed = new Event(Convert.ToUInt64(_dict["eventID"]));
                            group.Remove(removed);
                            break;
                        }
                    case "name":
                        {
                            group.Name = _dict["name"];
                            break;
                        }
                    case "delete":
                        {
                            group.Delete();
                            return "200";
                        }
                    default:
                        {
                            _response.StatusCode = 404;
                            return "404";
                        }
                }
                group.Update();
                return "200";
            }
            private string Update(Gift gift)
            {
                switch (_dict["item"])
                {
                    case "delete":
                        gift.Delete();
                        return "200";
                    case "reserve":
                        int release = gift.Reservations.FindAll(g => g.User.ID == _user.ID).Count;
                        _user.Release(gift, release);
                        int reserve = Convert.ToInt32(_dict["numReserve"]);
                        int reserved = _user.Reserve(gift, reserve);
                        if (reserved < reserve)
                        {
                            _user.Release(gift, reserved);
                            return "0";
                            // Unreserve and report back
                        }
                        return "200";
                    case "release":
                        int toRelease = Convert.ToInt32(_dict["numRelease"]);
                        int released = _user.Release(gift, toRelease);
                        return released.ToString();
                    case "receive":
                        // Receive this gift (unless already received; then undo)
                        if (gift.DateReceived.HasValue)
                        {
                            gift.DateReceived = null;
                        } else
                        {
                            gift.DateReceived = DateTime.Now;
                            foreach (var res in gift.Reservations)
                            {
                                res.Delete();
                            }
                        }
                        gift.Update();
                        // Remove all reservations?
                        return "200";
                    case "update":
                        gift.Name = _dict["name"];
                        gift.Description = _dict["description"];
                        gift.Url = _dict["url"];
                        gift.Cost = Convert.ToDouble(_dict["cost"] == null || _dict["cost"].Length == 0 ? "0.00" : _dict["cost"]);
                        gift.Quantity = Convert.ToUInt32(_dict["quantity"] == null || _dict["quantity"].Length == 0 ? "1" : _dict["quantity"]);
                        gift.Rating = Convert.ToDouble(_dict["rating"] == null || _dict["rating"].Length == 0 ? "0.0" : _dict["rating"]);
                        gift.ColorText = _dict["colorText"];
                        gift.Stores = _dict["stores"];
                        gift.Size = _dict["size"];
                        gift.Category = new Category(_dict["category"]);
                        gift.Color = _dict["color"]; // as a hex
                        gift.Update();
                        return "200";
                    default:
                        return "0";
                }
            }

            private void Logout()
            {
                _response.Cookies.Add(new Cookie
                {
                    Name = "UserHash",
                    Value = "",
                    Expires = DateTime.Now.AddDays(-1d)
                });
                // If currently logged in, request will have cookie. See if cookie exists, and remove if so
                if (_request.Cookies["UserHash"] != null)
                {
                    RemoveConnection(_request.Cookies["UserHash"].Value);
                }
            }

            private bool IsLogged(string hash)
            {
                return Connections.Exists(new Predicate<Connection>((Connection con) =>
                {
                    return con.Info != null && hash.Equals(con.Info.Hash);
                }));
            }
            private ulong GetLogged(string hash)
            {
                ulong id = 0;
                Connections.Exists(new Predicate<Connection>((Connection con) =>
                {
                    if (con.Info != null && hash.Equals(con.Info.Hash))
                    {
                        id = con.Info.UserId;
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }));
                return id;
            }

            private string AddConnection(ulong userId, IPEndPoint iPEndPoint)
            {
                lock (key)
                {
                    string hash = "";
                    if (!Connections.Exists(new Predicate<Connection>((Connection con) =>
                    {
                        if (con.Info != null && userId.Equals(con.Info.UserId))
                        {
                            hash = con.Info.Hash;
                            con.Ends.Add(iPEndPoint);
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    })))
                    {
                        Connection con = new Connection(userId);
                        con.Ends.Add(iPEndPoint);
                        Connections.Add(con);
                        hash = con.Info.Hash;
                    }
                    return hash;
                }
            }
            private void RemoveConnection(ulong userId)
            {
                lock(key)
                {
                    Connections.RemoveAll(new Predicate<Connection>((Connection con) =>
                    {
                        return con.Info.UserId == userId;
                    }));
                }
            }
            private void RemoveConnection(string hash)
            {
                lock(key)
                {
                    Connections.RemoveAll(new Predicate<Connection>((Connection con) =>
                    {
                        return hash.Equals(con.Info.Hash);
                    }));
                }
            }
            private static string GeneratePath(string uri)
            {
                return Directory.GetCurrentDirectory() + uri;
            }
        }
    }
}
